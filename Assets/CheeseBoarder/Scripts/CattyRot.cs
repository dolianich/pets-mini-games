//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/CheeseBoarder/Scripts/CattyRot.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CattyRot : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CattyRot()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CattyRot"",
    ""maps"": [
        {
            ""name"": ""Catty"",
            ""id"": ""91cbf95a-0f97-4557-920f-26aee006d623"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""3be023b0-3050-4213-9886-23a4258b9166"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""5cd1bd8c-dfbf-4b1e-9da1-6785449bf388"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd keys"",
                    ""id"": ""08640a55-3610-46a8-b26c-9aae6f1f7503"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e2a193c4-d9d8-4e71-b0bf-59de68c96381"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ed7fa0e2-59bb-41ba-b079-01936c78fbec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""arrows keys"",
                    ""id"": ""7b7ec5c3-8069-43b2-b3d7-b89003fd4cb9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a06eb1b9-3bbb-4b2d-a816-dab9fcb45b77"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1e7961ca-d299-4b06-b212-375426735a18"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9c5faacb-0269-47ea-81c5-902f0a8d1ce2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51278b7a-b43c-45bf-8bec-4862aeff6111"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Catty
        m_Catty = asset.FindActionMap("Catty", throwIfNotFound: true);
        m_Catty_Rotation = m_Catty.FindAction("Rotation", throwIfNotFound: true);
        m_Catty_Boost = m_Catty.FindAction("Boost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Catty
    private readonly InputActionMap m_Catty;
    private ICattyActions m_CattyActionsCallbackInterface;
    private readonly InputAction m_Catty_Rotation;
    private readonly InputAction m_Catty_Boost;
    public struct CattyActions
    {
        private @CattyRot m_Wrapper;
        public CattyActions(@CattyRot wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Catty_Rotation;
        public InputAction @Boost => m_Wrapper.m_Catty_Boost;
        public InputActionMap Get() { return m_Wrapper.m_Catty; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CattyActions set) { return set.Get(); }
        public void SetCallbacks(ICattyActions instance)
        {
            if (m_Wrapper.m_CattyActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_CattyActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_CattyActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_CattyActionsCallbackInterface.OnRotation;
                @Boost.started -= m_Wrapper.m_CattyActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_CattyActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_CattyActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m_CattyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public CattyActions @Catty => new CattyActions(this);
    public interface ICattyActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
